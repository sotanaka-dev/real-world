name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v3

      - name: Setup ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.2"

      - name: Install dependencies
        run: |
          cd real-world
          bundle install

      - name: Setup database
        run: |
          cd real-world
          bundle exec rails db:setup RAILS_ENV=test

      - name: Run tests
        run: |
          cd real-world
          bundle exec rails test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    env:
      PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
      HOSTNAME_1: ${{ secrets.HOSTNAME_1  }}
      HOSTNAME_2: ${{ secrets.HOSTNAME_2  }}
      USER_NAME: ${{ secrets.USER_NAME  }}

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to EC2 Instance 1
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME_1} '
            cd /home/ec2-user/real-world &&
            git fetch --all &&
            git reset --hard origin/main &&
            sudo docker compose -f docker-compose-prod.yml down &&
            sudo docker compose -f docker-compose-prod.yml up -d --build
            '

      - name: Deploy to EC2 Instance 2
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME_2} '
            cd /home/ec2-user/real-world &&
            git fetch --all &&
            git reset --hard origin/main &&
            sudo docker compose -f docker-compose-prod.yml down &&
            sudo docker compose -f docker-compose-prod.yml up -d --build
            '
